{"version":3,"sources":["index.js"],"names":["input","FormComponent","handleSubmit","items","e","preventDefault","value","node","map","item","id","text","reducerApp","state","action","type","nextTodoId","AddToDo","SetToDo","mapStateToProps","props","mapDispatchToProps","dispatch","FormComponentContainer","AppComponent","store","document","getElementById"],"mappings":";;AAIA;;;;AACA;;AACA;;AACA;;;;oMAPA;;;;AASA,IAAIA,cAAJ;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,gBAAgB,SAAhBA,aAAgB,OAA2B;AAAA,QAAzBC,YAAyB,QAAzBA,YAAyB;AAAA,QAAXC,KAAW,QAAXA,KAAW;;;AAEzC,WAAQ;AAAA;AAAA;AAAK;AAAA;AAAA,cAAM,UACf,kBAACC,CAAD,EAAQ;AACJA,sBAAEC,cAAF;AACAH,iCAAaF,MAAMM,KAAnB;AACAN,0BAAMM,KAAN,GAAc,EAAd;AACH,iBALQ;AAOT,qDAAO,KAAK,mBAAQ;AAACN,4BAAQO,IAAR;AAAa,iBAAlC,GAPS;AAQT;AAAA;AAAA;AAAA;AAAA;AARS,SAAL;AAUA;AAAA;AAAA;AAEQJ,kBAAMK,GAAN,CAAU,UAASC,IAAT,EAAe;AACrB,uBAAQ;AAAA;AAAA,sBAAI,KAAKA,KAAKC,EAAd;AAAmBD,yBAAKE;AAAxB,iBAAR;AACH,aAFD;AAFR;AAVA,KAAR;AAkBP,CApBD;;AAuBA,IAAIC,aAAa,SAAbA,UAAa,GAAwB;AAAA,QAAvBC,KAAuB,uEAAf,EAAe;AAAA,QAAXC,MAAW;;AACrC,YAAQA,OAAOC,IAAf;AACI,aAAK,WAAL;AACQ,gDACOF,KADP,IAEI;AACIH,oBAAII,OAAOJ,EADf;AAEIC,sBAAMG,OAAOH;AAFjB,aAFJ;AAOR,aAAK,WAAL;AACI,mBAAQ;AACJA,sBAAMG,OAAOH;AADT,aAAR;AAIJ;AACI,mBAAOE,KAAP;AAfR;AAiBH,CAlBD;;AAoBA,IAAIG,aAAa,CAAjB;AACA,IAAIC,UAAU,SAAVA,OAAU,CAACN,IAAD,EAAU;AACpB,WAAO;AACHI,cAAM,WADH;AAEHL,YAAIM,YAFD;AAGHL,cAAMA;AAHH,KAAP;AAKH,CAND;;AAQA,IAAIO,UAAU,SAAVA,OAAU,CAACP,IAAD,EAAU;AACpB,WAAO;AACHI,cAAM,WADH;AAEHL,YAAIM,YAFD;AAGHL,cAAMA;AAHH,KAAP;AAKH,CAND;;AAQA,IAAIQ,kBAAkB,SAAlBA,eAAkB,CAACN,KAAD,EAAQO,KAAR,EAAkB;AACpC,WAAO;AACHjB,eAAOU;AADJ,KAAP;AAGH,CAJD;;AAMA,IAAIQ,qBAAqB,SAArBA,kBAAqB,CAACC,QAAD,EAAWF,KAAX,EAAqB;AAC1C,WAAO;AACHlB,sBAAc,4BACd;AACIoB,qBAASL,QAAQN,IAAR,CAAT;AACH;AAJE,KAAP;AAMH,CAPD;;AASA,IAAMY,yBAAyB,yBAAQJ,eAAR,EAAyBE,kBAAzB,EAA6CpB,aAA7C,CAA/B;AACA;;;AAGA,IAAIuB,eAAe,SAAfA,YAAe;AAAA,WACf;AAAA;AAAA;AACI,sCAAC,sBAAD;AADJ,KADe;AAAA,CAAnB;;AAMA,IAAIC,QAAQ,wBAAYb,UAAZ,CAAZ;;AAEA,sBACI;AAAA;AAAA,MAAU,OAAOa,KAAjB;AACI,kCAAC,YAAD;AADJ,CADJ,EAIIC,SAASC,cAAT,CAAwB,MAAxB,CAJJ","file":"bundle.js","sourcesContent":["/**\n * Created by kalpana on 10/06/17.\n */\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport {Provider, connect} from 'react-redux';\nimport {createStore} from 'redux';\n\nlet input;\n\n\n//const ListComponent = ({items}) => {\n//\n//    console.log('items', items);\n//    return (<ul>\n//        {\n//            items.map(function(item) {\n//            return (<li key={item.id}>{item.text}</li>)\n//        })}\n//    </ul>)\n//}\n\nconst FormComponent = ({handleSubmit, items}) => {\n\n        return (<div><form onSubmit={\n            (e) =>  {\n                e.preventDefault();\n                handleSubmit(input.value);\n                input.value = '';\n            }\n        }>\n            <input ref={node => {input = node}} />\n            <button>Click</button>\n        </form>\n                <ul>\n                    {\n                        items.map(function(item) {\n                            return (<li key={item.id}>{item.text}</li>)\n                        })}\n                </ul>\n            </div>\n        )\n}\n\n\nlet reducerApp = (state = [], action) => {\n    switch (action.type) {\n        case 'ADD_TO_DO' :\n                return [\n                    ...state,\n                    {\n                        id: action.id,\n                        text: action.text\n                    }\n                ]\n        case 'SET_TO_DO' :\n            return ({\n                text: action.text\n            }\n            );\n        default:\n            return state;\n    }\n}\n\nlet nextTodoId = 0;\nlet AddToDo = (text) => {\n    return {\n        type: 'ADD_TO_DO',\n        id: nextTodoId++,\n        text: text\n    }\n}\n\nlet SetToDo = (text) => {\n    return {\n        type: 'SET_TO_DO',\n        id: nextTodoId++,\n        text: text\n    }\n}\n\nlet mapStateToProps = (state, props) => {\n    return {\n        items: state\n    }\n}\n\nlet mapDispatchToProps = (dispatch, props) => {\n    return {\n        handleSubmit: text =>\n        {\n            dispatch(AddToDo(text))\n        },\n    }\n}\n\nconst FormComponentContainer = connect(mapStateToProps, mapDispatchToProps)(FormComponent);\n//const ListComponentContainer = connect(mapStateToProps, mapStateToProps)(ListComponent);\n\n\nlet AppComponent = () => (\n    <div>\n        <FormComponentContainer />\n    </div>\n)\n\nlet store = createStore(reducerApp);\n\nrender(\n    <Provider store={store}>\n        <AppComponent />\n    </Provider>,\n    document.getElementById(\"root\")\n);"]}